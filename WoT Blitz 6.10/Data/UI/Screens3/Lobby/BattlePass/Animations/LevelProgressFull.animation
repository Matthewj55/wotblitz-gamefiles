animation LEVEL_PROGRESS_ANIMATION
{
	if (isNeedAnimation)
	{

		if (level.index > oldLevelProgressIndex and level.index <= newLevelProgressIndex)
		{
			Wait(((level.index - oldLevelProgressIndex - 1)*totalProgress + totalProgress - oldLevelProgressValue) * 0.05);
		}

		parallel
		{
			// progress bar number
			if (isLevelPassedForReal)
			{
				ChangeProperty("**/ProgressBar/LevelNum", "UITextComponent", "color", rgba(#f5f5f5, 0.7), 0.5);
			}
		
			// progress bar value
			ChangeProperty("**/ProgressBar/Value", "SizePolicy", "horizontalValue", 100.0 * level.currentProgress / level.totalProgress, progressAnimationDelta * 0.05);
			
			// progress bar bg color
			Color(path="**/ProgressBar", time = 0.5, color = (when isSelectedForReal and isAnchored -> rgba(#ffc226, 0.7), isSelectedForReal or isAnchored or isLevelPassedForReal -> rgba(#ffc226, 0.5), rgba(#cc8314, 0.25)));
			
			// free reward bg color
			Color(path="**/FreeRewards", time = 0.5, color = (when isSelectedForReal -> rgba(#f5f5f5, 0.5), isAnchored or isLevelPassedForReal -> rgba(#f5f5f5, 0.25), rgba(#f5f5f5, 0.1)));
			
			// paid rewards bg color
			Color(path="**/PaidRewardBlock", time = 0.5, color = (when isSelectedForReal and isAnchored -> rgba(#ffc226, 0.7), isSelectedForReal or isAnchored or isLevelPassedForReal -> rgba(#ffc226, 0.5), rgba(#cc8314, 0.25)));
			
			// paid rewards bg gradient color
			Color(path="**/PaidRewards", time = 0.5, color = (when isSelectedForReal -> rgba(#f5f5f5, 0.25), isAnchored -> rgba(#e65c17, 0.7), isLevelPassedForReal -> rgba(#e65c17, 0.5), rgba(#e65c17, 0.25)));

			BroadcastEvent("TranformRewardToReadyForTaking", "**/FreeRewards", 0.5, isLevelPassedForReal);
			BroadcastEvent("TranformRewardToReadyForTaking", "**/PaidRewards", 0.5, isLevelPassedForReal);		
		}
		
		DirectEvent("PROGRESS_ANIMATION_ENDED", ".");
	}
}